<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goroute on Dlgde的博客</title>
    <link>/tags/goroute/</link>
    <description>Recent content in goroute on Dlgde的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 05 Apr 2019 02:20:30 +0000</lastBuildDate>
    
	<atom:link href="/tags/goroute/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>goroute之间通信-共享全局变量(理解go的多并发)</title>
      <link>/archives/139/</link>
      <pubDate>Fri, 05 Apr 2019 02:20:30 +0000</pubDate>
      
      <guid>/archives/139/</guid>
      <description>&lt;h3 id=&#34;1-go语言中goroute之间通信有两种方式&#34;&gt;1、go语言中goroute之间通信有两种方式：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;通过全局变量，这种方式得加锁&lt;/li&gt;
&lt;li&gt;通过channel进行通信&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是一个通过全局变量进行通信的例子：&lt;/p&gt;

&lt;pre class=&#34;lang:default decode:true&#34;&gt;package main

import (
    &#34;fmt&#34;
    &#34;sync&#34;
    &#34;time&#34;
)

var (
    m    = make(map[int]uint64)
    lock sync.Mutex
)

type task struct {
    n int
}

func calc(t *task) {
    var sum uint64
    sum = 1
    for i := 1; i &amp;lt; t.n; i++ {
        sum *= uint64(i)
    }
    lock.Lock()
    m[t.n] = sum
    lock.Unlock()
}

func main() {
    for i := 0; i &amp;lt; 20; i++ {
        t := &amp;task{n: i}
        go calc(t)
    }
    time.Sleep(10 * time.Second)

    lock.Lock()
    for k, v := range m {
        fmt.Printf(&#34;%d!=%v\n&#34;, k, v)
    }
    lock.Unlock()

}

&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>